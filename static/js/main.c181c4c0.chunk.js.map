{"version":3,"sources":["components/form-error/index.js","components/form-error/form-error.js","components/formik-form/formik-form.js","components/formik-form/index.js","components/app/index.js","components/app/app.js","index.js"],"names":["FormError","touched","message","className","validationSchema","Yup","shape","name","min","max","required","email","password","passwordConfirmation","oneOf","country","FormikForm","React","useState","setCountry","suggestions","setSuggestions","initialValues","onSubmit","values","setSubmitting","resetForm","setTimeout","alert","JSON","stringify","errors","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue","htmlFor","type","id","placeholder","onChange","onBlur","value","inputProps","autoComplete","_event","newValue","onSuggestionsFetchRequested","a","fetch","then","result","json","map","row","flag","onSuggestionsClearRequested","onSuggestionSelected","event","suggestion","method","preventDefault","getSuggestionValue","renderSuggestion","src","width","alt","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c181c4c0.chunk.js","sourcesContent":["import FormError from \"./form-error\";\r\n\r\nexport default FormError;\r\n","import React from \"react\";\r\n\r\nconst FormError = ({ touched, message }) => {\r\n  if (!touched) {\r\n    return <div className=\"form-message invalid\">&nbsp;</div>;\r\n  }\r\n  if (message) {\r\n    return <div className=\"form-message invalid\">{message}</div>;\r\n  }\r\n  return <div className=\"form-message valid\">all good</div>;\r\n};\r\n\r\nexport default FormError;\r\n","import React from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Autosuggest from \"react-autosuggest\";\r\nimport FormError from \"../form-error\";\r\n\r\nimport \"./formik-form.css\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(1, \"Must have a character\")\r\n    .max(50, \"Must be shorter than 50 characters\")\r\n    .required(\"Must enter a name\"),\r\n  email: Yup.string()\r\n    .email(\"Must be a valid email address\")\r\n    .max(255, \"Must be shorter than 255\")\r\n    .required(\"Email is required\"),\r\n  password: Yup.string()\r\n    .min(8, \"Password must be at least 8 characters\")\r\n    .max(50, \"Must be shorter than 50 characters\")\r\n    .required(\"Password is required\"),\r\n  passwordConfirmation: Yup.string()\r\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n    .required(\"Password confirm is required\"),\r\n  country: Yup.string().required(\"Must choose country\"),\r\n});\r\n\r\nconst FormikForm = () => {\r\n  const [country, setCountry] = React.useState(\"\");\r\n  const [suggestions, setSuggestions] = React.useState([]);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        passwordConfirmation: \"\",\r\n        country: \"\",\r\n      }}\r\n      validationSchema={validationSchema}\r\n      onSubmit={(values, { setSubmitting, resetForm }) => {\r\n        setSubmitting(true);\r\n\r\n        setTimeout(() => {\r\n          alert(JSON.stringify(values, null, 2));\r\n          resetForm();\r\n          setSubmitting(false);\r\n        }, 1000);\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue,\r\n      }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <div className=\"input-row\">\r\n            <label htmlFor=\"name\">Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              id=\"name\"\r\n              placeholder=\"Enter your name\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.name}\r\n              className={touched.name && errors.name ? \"has-error\" : null}\r\n            />\r\n            <FormError touched={touched.name} message={errors.name} />\r\n          </div>\r\n\r\n          <div className=\"input-row\">\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              id=\"email\"\r\n              placeholder=\"Enter your email\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.email}\r\n              className={touched.email && errors.email ? \"has-error\" : null}\r\n            />\r\n            <FormError touched={touched.email} message={errors.email} />\r\n          </div>\r\n\r\n          <div className=\"input-row\">\r\n            <label htmlFor=\"password\">Password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              id=\"password\"\r\n              placeholder=\"Enter your password\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.password}\r\n              className={\r\n                touched.password && errors.password ? \"has-error\" : null\r\n              }\r\n            />\r\n            <FormError touched={touched.password} message={errors.password} />\r\n          </div>\r\n\r\n          <div className=\"input-row\">\r\n            <label htmlFor=\"password-confirmation\">Confirm your password</label>\r\n            <input\r\n              type=\"password\"\r\n              name=\"passwordConfirmation\"\r\n              id=\"password-confirmation\"\r\n              placeholder=\"Confirm your password\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.passwordConfirmation}\r\n              className={\r\n                touched.passwordConfirmation && errors.passwordConfirmation\r\n                  ? \"has-error\"\r\n                  : null\r\n              }\r\n            />\r\n            <FormError\r\n              touched={touched.passwordConfirmation}\r\n              message={errors.passwordConfirmation}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"input-row\">\r\n            <label htmlFor=\"country\">Country</label>\r\n            <Autosuggest\r\n              inputProps={{\r\n                placeholder: \"Type your country\",\r\n                autoComplete: \"abcd\",\r\n                name: \"country\",\r\n                id: \"country\",\r\n                value: country,\r\n                onChange: (_event, { newValue }) => {\r\n                  setCountry(newValue);\r\n                },\r\n                className:\r\n                  touched.country && errors.country ? \"has-error\" : null,\r\n              }}\r\n              suggestions={suggestions}\r\n              onSuggestionsFetchRequested={async ({ value }) => {\r\n                if (!value) {\r\n                  setSuggestions([]);\r\n                  return;\r\n                }\r\n\r\n                try {\r\n                  const result = await fetch(\r\n                    `https://restcountries.eu/rest/v2/name/${value}`\r\n                  ).then((result) => result.json());\r\n\r\n                  setSuggestions(\r\n                    result.map((row) => ({\r\n                      name: row.name,\r\n                      flag: row.flag,\r\n                    }))\r\n                  );\r\n                } catch (e) {\r\n                  setSuggestions([]);\r\n                }\r\n              }}\r\n              onSuggestionsClearRequested={() => {\r\n                setSuggestions([]);\r\n              }}\r\n              onSuggestionSelected={(event, { suggestion, method }) => {\r\n                if (method === \"enter\") {\r\n                  event.preventDefault();\r\n                }\r\n                setCountry(suggestion.name);\r\n                setFieldValue(\"country\", suggestion.name);\r\n              }}\r\n              getSuggestionValue={(suggestion) => {\r\n                return suggestion.name;\r\n              }}\r\n              renderSuggestion={(suggestion) => {\r\n                return (\r\n                  <div>\r\n                    <img\r\n                      src={suggestion.flag}\r\n                      width=\"20\"\r\n                      alt={suggestion.name}\r\n                    />\r\n                    {suggestion.name}\r\n                  </div>\r\n                );\r\n              }}\r\n            />\r\n            <FormError touched={touched.country} message={errors.country} />\r\n          </div>\r\n\r\n          <div className=\"input-row\">\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormikForm;\r\n","import FormikForm from \"./formik-form\";\r\n\r\nexport default FormikForm;\r\n","import App from \"./app\";\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport FormimForm from \"../formik-form\";\r\n\r\nimport \"./app.css\";\r\n\r\nexport default () => {\r\n  return <FormimForm />;\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/app\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}